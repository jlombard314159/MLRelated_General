seefEsts_BAT
head(mastSearch)
twl_BAT_Control
head(locations)
ls()
save.image("BOGY_TestPCMData.R")
getwd()
letters
runif(0,1)
sample(c(1,0),10)
?sample)
?sample
sample(c(0,1),2)
sample(c(0,1),10,replace=TRUE)
tempDF <- data.frame("Turbine"= letters,"Fats" = sample(c(0,1),size=length(letters),
replace=TRUE),"Treatment"=c(rep("A",12),rep("B",14)))
tempDF
?runif
runif(10)
tempDF <- data.frame("Turbine"= letters,"Fats" = sample(c(0,1),size=length(letters),
replace=TRUE),"Treatment"=c(rep("A",12),rep("B",14)),
"DetProb" = runif(26))
tempDF <- data.frame("Turbine"= letters,"Fats" = c(rep(1,10),rep(0,16)),
"Treatment"=c(rep("A",12),rep("B",14)),
"DetProb" = runif(26))
library(glmmTMB)
theGLM <- glmmTMB(Fats ~ Treatment + (1 | SearchLocation) + offset(DetProb),data=tempDF,
family = nbinom1)
theGLM <- glmmTMB(Fats ~ Treatment + (1 | Turbine) + offset(DetProb),data=tempDF,
family = nbinom1)
summary(theGLM)
head(tempDF)
tempDF
theGLM <- glmmTMB(Fats ~ Treatment +  offset(DetProb),data=tempDF,
family = nbinom1)
tempDF <- data.frame("Turbine"= letters,"Fats" = c(rep(1,10),rep(0,10),rep(1,4)),
"Treatment"=c(rep("A",12),rep("B",14)),
"DetProb" = runif(26))
tempDF <- data.frame("Turbine"= letters,"Fats" = c(rep(1,10),rep(0,10),rep(1,6)),
"Treatment"=c(rep("A",12),rep("B",14)),
"DetProb" = runif(26))
library(glmmTMB)
theGLM <- glmmTMB(Fats ~ Treatment + (1 | Turbine) + offset(DetProb),data=tempDF,
family = nbinom1)
summary(theGLM)
tempDF <- data.frame("Turbine"= letters,"Fats" = c(rep(2,10),rep(0,10),rep(1,6)),
"Treatment"=c(rep("A",12),rep("B",14)),
"DetProb" = runif(26))
library(glmmTMB)
theGLM <- glmmTMB(Fats ~ Treatment + (1 | Turbine) + offset(DetProb),data=tempDF,
family = nbinom1)
library(glmmTMB)
summary(theGLM)
library(tidyverse)
tempDF %>% group_by(Treatment) %>%
summarize(FatCount = sum(Fats))
tempDF %>% group_by(Treatment) %>%
summarize(FatCount = sum(Fats)/length(Treatment))
tempDF %>% group_by(Treatment) %>%
summarize(FatCount = sum(Fats)/length(Turbine))
26-6-6
tempDF <- data.frame("Turbine"= letters,"Fats" = c(rep(2,6),rep(0,14),rep(1,6)),
"Treatment"=c(rep("A",12),rep("B",14)),
"DetProb" = runif(26))
library(glmmTMB)
theGLM <- glmmTMB(Fats ~ Treatment + (1 | Turbine) + offset(DetProb),data=tempDF,
family = nbinom1)
library(tidyverse)
tempDF %>% group_by(Treatment) %>%
summarize(FatCount = sum(Fats)/length(Turbine))
tempDF %>% group_by(Treatment) %>%
summarize(FatCount = sum(Fats))
summary(theGLM)
tempDF <- data.frame("Turbine"= letters,"Fats" = c(rep(2,7),rep(0,13),rep(1,6)),
"Treatment"=c(rep("A",12),rep("B",14)),
"DetProb" = runif(26))
library(glmmTMB)
theGLM <- glmmTMB(Fats ~ Treatment + (1 | Turbine) + offset(DetProb),data=tempDF,
family = nbinom1)
summary(theGLM)
library(tidyverse)
tempDF %>% group_by(Treatment) %>%
summarize(FatCount = sum(Fats))
tempDF <- data.frame("Turbine"= letters,"Fats" = c(rep(10,12),rep(4,14),
tempDF <- data.frame("Turbine"= letters,"Fats" = c(rep(10,12),rep(4,14)),
"Treatment"=c(rep("A",12),rep("B",14)),
"DetProb" = runif(26))
library(glmmTMB)
theGLM <- glmmTMB(Fats ~ Treatment + (1 | Turbine) + offset(DetProb),data=tempDF,
family = nbinom1)
summary(theGLM)
5*12
2*14
3*14
tempDF <- data.frame("Turbine"= letters,"Fats" = c(rep(5,12),rep(2,14)),
"Treatment"=c(rep("A",12),rep("B",14)),
"DetProb" = runif(26))
library(glmmTMB)
theGLM <- glmmTMB(Fats ~ Treatment + (1 | Turbine) + offset(DetProb),data=tempDF,
family = nbinom1)
summary(theGLM)
library(tidyverse)
tempDF %>% group_by(Treatment) %>%
summarize(FatCount = sum(Fats))
tempDF <- data.frame("Turbine"= letters,"Fats" = c(rep(5,12),rep(1,14)),
"Treatment"=c(rep("A",12),rep("B",14)),
"DetProb" = runif(26))
library(glmmTMB)
theGLM <- glmmTMB(Fats ~ Treatment + (1 | Turbine) + offset(DetProb),data=tempDF,
family = nbinom1)
summary(theGLM)
tempDF <- data.frame("Turbine"= letters,"Fats" = c(rep(5,12),rep(3,14)),
"Treatment"=c(rep("A",12),rep("B",14)),
"DetProb" = runif(26))
library(glmmTMB)
theGLM <- glmmTMB(Fats ~ Treatment + (1 | Turbine) + offset(DetProb),data=tempDF,
family = nbinom1)
summary(theGLM)
library(tidyverse)
tempDF %>% group_by(Treatment) %>%
summarize(FatCount = sum(Fats))
tempDF <- data.frame("Turbine"= letters,"Fats" = c(rep(5,13),rep(3,13)),
"Treatment"=c(rep("A",13),rep("B",13)),
"DetProb" = runif(26))
library(glmmTMB)
theGLM <- glmmTMB(Fats ~ Treatment + (1 | Turbine) + offset(DetProb),data=tempDF,
family = nbinom1)
summary(theGLM)
library(tidyverse)
tempDF %>% group_by(Treatment) %>%
summarize(FatCount = sum(Fats))
5*13 + 3*13
tempDF <- data.frame("Turbine"= letters,"Fats" = c(rep(5,13),rep(3,13)),
"Treatment"=c(rep("A",13),rep("B",13)),
"DetProb" = runif(26))
library(glmmTMB)
theGLM <- glmmTMB(Fats ~ Treatment + (1 | Turbine) + offset(DetProb),data=tempDF,
family = nbinom1)
summary(theGLM)
library(tidyverse)
tempDF %>% group_by(Treatment) %>%
summarize(FatCount = sum(Fats))
tempDF <- data.frame("Turbine"= letters,"Fats" = c(rep(5,13),rep(4,13)),
"Treatment"=c(rep("A",13),rep("B",13)),
"DetProb" = runif(26))
library(glmmTMB)
theGLM <- glmmTMB(Fats ~ Treatment + (1 | Turbine) + offset(DetProb),data=tempDF,
family = nbinom1)
summary(theGLM)
library(tidyverse)
tempDF %>% group_by(Treatment) %>%
summarize(FatCount = sum(Fats))
tempDF <- data.frame("Turbine"= letters,"Fats" = c(rep(5,13),rep(3,13)),
"Treatment"=c(rep("A",13),rep("B",13)),
"DetProb" = runif(26))
library(glmmTMB)
theGLM <- glmmTMB(Fats ~ Treatment + (1 | Turbine) + offset(DetProb),data=tempDF,
family = nbinom1)
summary(theGLM)
library(tidyverse)
tempDF %>% group_by(Treatment) %>%
summarize(FatCount = sum(Fats))
tempDF <- data.frame("Turbine"= letters,"Fats" = c(rep(5,13),rep(3,13)),
"Treatment"=c(rep("A",13),rep("B",13)),
"DetProb" = 0.8)
library(glmmTMB)
theGLM <- glmmTMB(Fats ~ Treatment + (1 | Turbine) + offset(DetProb),data=tempDF,
family = nbinom1)
summary(theGLM)
library(tidyverse)
tempDF %>% group_by(Treatment) %>%
summarize(FatCount = sum(Fats))
100-38
8 * 2 * 26
8 * 2 * 10
8*2
38*2
(14-6)/6
(62-38)/38
1/20
14/20
62/100
temp <- data.frame("Group" = c("A","A","A","A","B","B","B","B"),"Value" = runif(8))
temp
library(tidyverse)
temp %>%  group_by(Group) %>% summarize(sample(2))
temp %>%  group_by(Group) %>% sample_n(2)
library(mxnet)
?mx.model.init.iter
?mx.model.load
temp <- read.csv("L:/Jaime/batcall/bat call/batcallTraining_Lab.csv")
table(temp$X1)
getwd()
temp <-read.csv("quickThing.csv",stringsAsFactors = FALSE)
dim(temp)
str(temp)
temp$BillingCode
temp <- temp[!(temp$BillingCode == ""),[
temp <- temp[!(temp$BillingCode == ""),]
dim(temp)
temp$BillingCode[!(temp$BillingCode %in% temp$UsedCode),]
temp$BillingCode[!(temp$BillingCode %in% temp$UsedCode)]
# Start with fresh, empty workspace.
rm(list = ls())
# Install WEST packages.
runCodePath <- '//chy-file-srv/generalFiles/All_Wind_Projects/RCodeForSQL/RunCode'
source(file.path(runCodePath, 'RunPackageInstallUpdate_westenergy.R'))
source(file.path(runCodePath, 'RunPackageInstallUpdate_westFA.R'))
# Load necessary libraries.
require(westenergy)
require(westFA)
require(RODBC)
require(tidyr)
# Review WEST package versions.
CheckPkgVersion("westenergy")
CheckPkgVersion("westFA")
# Set testing indicator. This should almost always be FALSE.
testing <- FALSE
# Change to your local path.
path <- 'C:/Users/jlombardi/Documents/GitLabCode/CampbellHillYr5/'
# Set your analysis paths. All analysis output will be saved here.
analysisPath <- file.path(path, 'output', '/')
workspacePath <- file.path(analysisPath, 'Workspaces')
# Read in all objects in Workspaces folder. These are data sets from your snapshot
# that are prepared for analysis.
westFA::LoadRDataFiles(workspacePath = workspacePath,
useAllSavedWorkspaceData = TRUE,
testing = testing)
# Set estimator and bootstrap indicators.
# --- IMPORTANT ---
#   These will determine the analysis of interest and run the scripts accordingly.
#   Do not change!
# -----------------
estimator <- analysisMetadata$estimatorType
parametricBootstrap <- !is.null(analysisMetadata$versions$GenEst)
#---------------------------------------------------------------------------------
# Set up data
#---------------------------------------------------------------------------------
# Obtain previously stored value of alpha.
theAlpha <- round(1 - analysisMetadata$CILevel, 2)
# Set number of bootstrap iterations (or samples). This usually does not change.
# NOTE: This is necessary for a GenEst or parametric bootstrap analysis.
nReps <- 1000
# Subset data to only large birds.
crLB <- cr[cr$Size %in% 'LB', ]
# Change to your covariates for l, the location parameter for modeling the
# probability of a carcass persisting until a particular time, aka the usual CR.
# Set to NULL for the intercept-only model. Covariates should match the
# corresponding column names in your 'cr' data frame.
covariates <- c('Season')
# Change to your covariates for s, the scale parameter for modeling the
# probability of a carcass persisting until a particular time. Set to NULL for the
# intercept-only model.
# NOTE: This is only relevant for a GenEst analysis. You do not need to change
#       anything if you are running a different analysis.
covariates_s <- NULL
# Fit all possible models.
(crMods_LB <- westFA::GetAllPossibleCRMods(crDat = crLB,
covariates = covariates,
covariates_s = covariates_s,
parBoot = parametricBootstrap,
estimator = estimator))
parametricBootstrap
# Fit all possible models.
(crMods_LB <- westFA::GetAllPossibleCRMods(crDat = crLB,
covariates = covariates,
covariates_s = covariates_s,
parBoot = parametricBootstrap,
estimator = estimator))
# Select the most parsimonious model.
smallDelta <- crMods_LB$DeltaAICc <= 2
fewParam <- crMods_LB$NumParameters == min(crMods_LB$NumParameters[smallDelta])
mostPars <- crMods_LB$AICc == min(crMods_LB$AICc[smallDelta & fewParam])
crMods_LB$modelUsed <- ifelse(mostPars, '*', '')
crMods_LB
# Get predicted values for the selected model.
# NOTE: Set searchInterval to a vector if >1 search frequency exists.
(crEsts_LB <- westFA::FitCRmodel(dat = crLB,
mod = crMods_LB$Covariates[mostPars],
distn = crMods_LB$Distribution[mostPars],
searchInterval = 62,
parBoot = parametricBootstrap))
crEsts_LB$model
# Get predicted values for the selected model.
# NOTE: Set searchInterval to a vector if >1 search frequency exists.
(crEsts_LB <- westFA::FitCRmodel(dat = crLB,
mod = crMods_LB$Covariates[mostPars],
distn = crMods_LB$Distribution[mostPars],
searchInterval = 62,
parBoot = TRUE))
# Fit all possible models.
(crMods_LB <- westFA::GetAllPossibleCRMods(crDat = crLB,
covariates = covariates,
covariates_s = covariates_s,
parBoot = TRUE,
estimator = "GenEst"))
# Select the most parsimonious model.
smallDelta <- crMods_LB$DeltaAICc <= 2
fewParam <- crMods_LB$NumParameters == min(crMods_LB$NumParameters[smallDelta])
mostPars <- crMods_LB$AICc == min(crMods_LB$AICc[smallDelta & fewParam])
crMods_LB$modelUsed <- ifelse(mostPars, '*', '')
crMods_LB
# Get predicted values for the selected model.
# NOTE: Set searchInterval to a vector if >1 search frequency exists.
(crEsts_LB <- westFA::FitCRmodel(dat = crLB,
mod = crMods_LB$Covariates[mostPars],
distn = crMods_LB$Distribution[mostPars],
searchInterval = 62,
parBoot = TRUE))
modelFit <- crEsts_LB$model
pct <- 1:98/100
pct <- pct[1:40]
ptime <- predict(modelFit,  type='quantile',
p=pct, se=TRUE)
modelFit
GenEst::cpm
?GenEst::cpm
crMods_LB
GenEst::cpm(formula_l = "l ~ Season",formula_s = "s ~ 1",
data = crLB,left = "fa_Left",right = "fa_Right",
dist = "weibull")
crLB
head(crLB)
GenEst::cpm(formula_l = "Season",formula_s = "1",
data = crLB,left = "fa_Left",right = "fa_Right",
dist = "weibull")
GenEst::cpm(formula_l = as.formula("l ~ Season"),formula_s = as.formula("s ~ 1"),
data = crLB,left = "fa_Left",right = "fa_Right",
dist = "weibull")
predict(GenEst::cpm(formula_l = as.formula("l ~ Season"),formula_s = as.formula("s ~ 1"),
data = crLB,left = "fa_Left",right = "fa_Right",
dist = "weibull"))
GenEst:::plot.com
GenEst:::plot.cpm
GenEst::ppersist
?GenEst::ppersist
rm(list=ls())
library(bioacoustics)
library(zoo)
audioFiles = list.files("C:/Users/jlombardi/Documents/GitLabCode/MEC Bat Call/Data/",full.names = T,recursive = T,pattern = "#")
classifications <- sapply(strsplit(audioFiles,"/"),function(x){x[length(x)-1]})
length(audioFiles)
audioFiles = list.files("C:/Users/jlombardi/Documents/GitLabCode/MEC Bat Acoustic/Data/",full.names = T,recursive = T,pattern = "#")
classifications <- sapply(strsplit(audioFiles,"/"),function(x){x[length(x)-1]})
#Below is used to find the gap to reduce in the actual code
findLength <- list()
for(soundclip in audioFiles)
{
try({
meh <- read_zc(soundclip)
time_reduced <- as.integer(round(meh$data$time_data/200))
freq <- log(meh$data$freq_data)
freq[is.na(freq)] <- 0
#unpacked gives us the length of time
unpacked <- numeric(max(time_reduced))
#start gives us the beginning of the data (?)
start <- min(time_reduced[time_reduced>0])
# if(is.infinite(start)) start <- 1
# if(is_empty(unpacked)) unpacked <- length(time_reduced)
for(i in 1:length(freq)){
# if(!is.na(freq[i]) && !is.na(time_reduced) )
{
unpacked[time_reduced[i]] <- freq[i]
}
}
##CAUTION: IF NOISE ISALWAYS 0 WE THROW IT OUT
unpacked <- unpacked[start:length(unpacked)]
#
#     unpacked <- tryCatch(
#       {
#         unpacked[start:length(unpacked)]
#       },
#       error=function(cond){browser()}
#     )
test <- unpacked > 0
active <- stats::filter(test,rep(1,min(5,length(test))), sides=2)
inactive <- stats::filter(!test,rep(1,min(5,length(test))), sides=2)-1
likelyActive <- active>inactive
likelyActive[is.na(likelyActive)] <- 0
unpacked[likelyActive & !test] <- NA
# browser()
unpacked <- na.approx(unpacked)
findLength[[soundclip]] <- min(unpacked[unpacked>0])   })
}
gapToReduce <- min(unlist(findLength))
gapToReduce
floor(gapToReduce)
unpackedSoundClips <- list()
for(soundclip in audioFiles)
{
try({
meh <- read_zc(soundclip)
time_reduced <- as.integer(round(meh$data$time_data/200))
freq <- log(meh$data$freq_data)
freq[is.na(freq)] <- 0
unpacked <- numeric(max(time_reduced))
start <- min(time_reduced[time_reduced>0])
for(i in 1:length(freq)){
# if(!is.na(freq[i]) && !is.na(time_reduced) )
{
unpacked[time_reduced[i]] <- freq[i]
}
}
##CAUTION: IF NOISE ISALWAYS 0 WE THROW IT OUT
unpacked <- unpacked[start:length(unpacked)]
# unpacked <- tryCatch(
#   {
#     unpacked[start:length(unpacked)]
#   },
#   error=function(cond){browser()}
# )
test <- unpacked > 0
active <- stats::filter(test,rep(1,min(5,length(test))), sides=2)
inactive <- stats::filter(!test,rep(1,min(5,length(test))), sides=2)-1
likelyActive <- active>inactive
likelyActive[is.na(likelyActive)] <- 0
unpacked[likelyActive & !test] <- NA
# browser()
unpacked <- na.approx(unpacked)
#This is removing the gap between 0 and the data.
##JAL didthis manually with above code.
unpacked <- unpacked-floor(gapToReduce)
# int8
# effective range ~ 10:12
#256/2
# if(max(unpacked)>5)browser()
# unpacked <- as.integer(round(unpacked * 128))
unpacked[unpacked < 0] <- 0
pathSplit <- strsplit(soundclip,"/")
# browser()
classification <- pathSplit[[1]][length(pathSplit[[1]])-1]
classification <- gsub("_","",classification)
#station
stationName <- basename(dirname(dirname(soundclip)))
name <- paste0(stationName,"_",
basename(dirname(soundclip)),"_",basename(soundclip) )
unpackedSoundClips[[name]] <- unpacked
})
}
#2000
#5000
unpackedSoundClips1 <- unpackedSoundClips#[which(!(grepl("Unknown",names(unpackedSoundClips)) | grepl("trouble",names(unpackedSoundClips))))]
unpackedSoundClips2 <- list()
for(soundSample in names(unpackedSoundClips1)){
species <- strsplit(soundSample,"_")[[1]][1]
# browser()
unpackedSoundClips2[[soundSample]] <- c(species,unpackedSoundClips1[[soundSample]])
}
length(unpackedSoundClips2)
fileName <- as.vector(sapply(audioFiles,function(x)
basename(dirname(x))))
fileNamePlace <- as.vector(sapply(audioFiles,function(x)
basename(dirname(dirname(x)))))
fileNameSpecies <- as.vector(sapply(audioFiles,function(x)
basename(x)))
fileNameSpecies
head(audioFiles)
head(fileName)
uniqueThingie <- paste0(fileNamePlace,"_",fileName,"_",fileNameSpecies)
uniqueThingie[1]
#JAL figuring out what got dropped
finalDataLabels <- uniqueThingie
#Convert the ones wth spaces...
finalDataLabels[grepl("HF_Unknown",finalDataLabels)] <-
gsub("HF_Unknown","HFUnknown",finalDataLabels[grepl("HF_Unknown",finalDataLabels)])
finalDataLabels[grepl("EPFU_LANO",finalDataLabels)] <-
gsub("EPFU_LANO","EPFULANO",finalDataLabels[grepl("EPFU_LANO",finalDataLabels)])
finalDataLabels[grepl("LF_Unknown",finalDataLabels)] <-
gsub("LF_Unknown","LFUnknown",finalDataLabels[grepl("LF_Unknown",finalDataLabels)])
finalDataLabels[grepl("trouble_irregular",finalDataLabels)] <-
gsub("trouble_irregular","troubleirregular",
finalDataLabels[grepl("trouble_irregular",finalDataLabels)])
finalDataLabels[grepl("trouble_twobats",finalDataLabels)] <-
gsub("trouble_twobats","troubletwobats",
finalDataLabels[grepl("trouble_twobats",finalDataLabels)])
#Now compare
namesToCompare <- names(unpackedSoundClips)
notInThere <- finalDataLabels[!(finalDataLabels %in% namesToCompare)]
notInThere
finalDataLabels[1:10]
names(unpackedSoundClips2)[1:10]
uniqueThingie <- paste0(fileNamePlace,"_",fileName,"_",fileNameSpecies)
#JAL figuring out what got dropped
finalDataLabels <- uniqueThingie
#Now compare
namesToCompare <- names(unpackedSoundClips)
notInThere <- finalDataLabels[!(finalDataLabels %in% namesToCompare)]
length(notInThere)
notInThere
length(audioFiles)
unique(fileNamePlace)
length(unique(fileNamePlace))
8395+608
0.75 + 0.5 + 1.5 + 0.75
setwd("C:/users/jlombardi/Documents/GitLabCode/nnplay/Classifier Pipeline/Data/")
dataFiles = list.files("C:/users/jlombardi/Documents/GitLabCode/nnplay/Classifier Pipeline/Data/",
full.names = T,recursive = T,pattern = ".rds")
dataFiles
setwd("C:/users/jlombardi/Documents/GitLabCode/nnplay/Classifier Pipeline/Data/")
dataFiles = list.files("C:/users/jlombardi/Documents/GitLabCode/nnplay/Classifier Pipeline/Data/",
full.names = T,recursive = T,pattern = ".rds")
dataList <- list()
dataFiles
strsplit(basename(dataFiles[9]),"_")[[1]][1]
temp <- strsplit(basename(dataFiles[9]),"_")[[1]][1]
temp <- readRDS(dataFiles[9])
temp$Species <- strsplit(basename(dataFiles[9]),"_")[[1]][1]
temp$Species <- paste0(strsplit(basename(dataFiles[9]),"_")[[1]][1],
"_","FATS")
write.csv(temp,"SHBA_PH_FATS.csv")
head(temp)
write.csv(temp,"SHBA_PH_FATS.csv",row.names=FALSE)
